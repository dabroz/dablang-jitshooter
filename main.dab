HWND game_hwnd = 0;
HDC  game_hdc  = 0;

int game_width = 800;
int game_height = 600;

cstring game_title = "JIT Shooter [controls: A/D/Space]";

void memzero(byte * ptr1, uint32 size)
{
byte * ptr = ptr1;
  for (int i = 0; i < size; i++) ptr1[i] = 0;
}

void ExitWithError(cstring s)
{
  printf("Error: %s\n", s);
  ExitProcess(17);
}

int NULL = 0;

BOOL CenterWindow(HWND hwnd)
{
	RECT rect;
	int width;
    int height;      
	int screenwidth;
    int screenheight;
	int x;
    int y;

	GetWindowRect(hwnd, &rect);

	width = rect.right - rect.left;
	height = rect.bottom - rect.top;

	screenwidth = GetSystemMetrics(SM_CXSCREEN);
	screenheight = GetSystemMetrics(SM_CYSCREEN);

	x = (screenwidth - width)/2;
	y = (screenheight - height)/2;

	MoveWindow(hwnd, x, y, width, height, 0);

	return 1;
}

byte * EMPTY_WND_PROC;

void myglcreatecontext()
{	
	HGLRC		hRC=0;			
	HINSTANCE	hInstance;		
	WNDCLASS	wc;						
	DWORD		dwExStyle;				
	DWORD		dwStyle;				
    RECT		rect;		
    cstring     winclass = "DablangGame";
		
	rect.left   = 0;			
	rect.right  = game_width;		
	rect.top    = 0;				
	rect.bottom = game_height;		

	hInstance			= GetModuleHandle(0);

	wc.style			= CS_HREDRAW | CS_VREDRAW | CS_OWNDC;	
	wc.lpfnWndProc		= EMPTY_WND_PROC;					
	wc.cbClsExtra		= 0;									
	wc.cbWndExtra		= 0;						
	wc.hInstance		= hInstance;							
	wc.hIcon			= LoadIcon(NULL, IDI_WINLOGO);			
	wc.hCursor			= LoadCursor(NULL, IDC_ARROW);			
	wc.hbrBackground	= NULL;									
	wc.lpszMenuName		= NULL;									
	wc.lpszClassName	= winclass;							

    dwExStyle = WS_EX_APPWINDOW | WS_EX_WINDOWEDGE;			
    dwStyle   = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;

	if (!RegisterClass(&wc)) 
        ExitWithError("RegisterClass");

    AdjustWindowRectEx(&rect, dwStyle, 0, dwExStyle);		

	int w = rect.right - rect.left;
    int h = rect.bottom - rect.top;

    byte * nullptr = 0;

	game_hwnd = CreateWindowEx(dwExStyle, winclass, game_title, dwStyle, 0, 0, w, h, NULL, NULL, hInstance, nullptr);							

	if (!game_hwnd) 
        ExitWithError("CreateWindowEx");

	ShowWindow(game_hwnd, SW_SHOW);						
	SetForegroundWindow(game_hwnd);		
	SetFocus(game_hwnd);					
    CenterWindow(game_hwnd);
	
    PIXELFORMATDESCRIPTOR pfd;

    memzero(&pfd, 40);
    pfd.nSize       = 40;
    pfd.nVersion    = 1;
    pfd.dwFlags     = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType  = PFD_TYPE_RGBA;
    pfd.cColorBits  = 32;
    pfd.cDepthBits  = 24;
    pfd.iLayerType  = PFD_MAIN_PLANE;

    game_hdc=GetDC(game_hwnd);
	if (!(game_hdc))
        ExitWithError("GetDC");	

    int PixelFormat=ChoosePixelFormat(game_hdc,&pfd);
	if (!(PixelFormat))	
        ExitWithError("ChoosePixelFormat");
	
    if (!SetPixelFormat(game_hdc,PixelFormat,&pfd))
        ExitWithError("SetPixelFormat");
    
    hRC=wglCreateContext(game_hdc);
    if (!(hRC))								
        ExitWithError("wglCreateContext");

	if (!wglMakeCurrent(game_hdc,hRC))									
        ExitWithError("wglMakeCurrent");

	dablang_preload_opengl();
}

uint32 key_left = 0;
uint32 key_right = 0;
uint32 key_shoot = 0;

uint32 key_state = 0; // 0 empty 1 pressed

float keytime = 99.0;

bool ProcessMessage(uint32 msg, uint32 lparam, uint32 wparam)
{
	int left = 65;
	int right = 68;
	int space = 32;
	
    if (msg == WM_KEYDOWN)
    {
        if (wparam==left && !key_right) { key_left = 1; key_state = 1; keytime = 0; }
        if (wparam==right && !key_left) { key_right = 1; key_state = 1; keytime = 0; }
        if (wparam == space) key_shoot = 1;
        return true;
    }
    if (msg == WM_KEYUP)
    {
        if (wparam==left) { key_left = 0; key_state = 0; keytime = 0; }
        if (wparam==right) { key_right = 0; key_state = 0; keytime = 0; }
        if (wparam == space) key_shoot = 0;
        return true;
    }
    if (msg == WM_QUIT)
    {
        ExitProcess(0);
        return true;
    }

    return false;
}

int xgame_pumpmsg(HWND hwnd)
{
    MSG msg;
    BOOL fGotMessage = PeekMessage(&msg,0,0,0,PM_REMOVE);

    if (fGotMessage)
    {
        if (fGotMessage == -1) return 0;
        if (!ProcessMessage(msg.message, msg.lParam, msg.wParam))
        {
            TranslateMessage(&msg);			
            DispatchMessage(&msg);			
        }
    }
    return 1;
}

int xgame_main()
{
    myglcreatecontext();
    cstring qq = glGetString(GL_VERSION);

    GameInit();
    zzSetupTime();

    while (true)
    {
        if (!xgame_pumpmsg(game_hwnd)) return 1;
        zzUpdateTime();
        GameUpdate(timeDT);
        GameRender();
        SwapBuffers(game_hdc);
    }

    return 0;
}

int main()
{
    return xgame_main();
}
