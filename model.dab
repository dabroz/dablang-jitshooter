struct GameModel
{
    byte<32> name;
    int vao;
    int count;
    int tex;
};

GameModel * ModelLoad(cstring fname)
{
	LOG("Loading model ", fname);
	
    GameModel * m = malloc(44);
    byte<64> filename;
	byte * pfilename = filename;
	reset(pfilename, 64);
	append(pfilename, "data\\");
	append(pfilename, fname);
	append(pfilename, ".utm");
    
    int len;
    byte * f = file_open(filename, &len);
    
    int vbo = -1;
    int ibo = -1;

    glGenBuffers(1, &vbo);
    glGenBuffers(1, &ibo);
        
    glGenVertexArrays(1, &m->vao);
    glBindVertexArray(m->vao);
    
    if (f)
    {
        int pos = 4;
        while (pos < len)
        {
            int * iptr = cast<int>f + pos;
            int type = iptr[0];
            int len = iptr[1];
            pos += len;

            if (type == 13)
            {
                glBindBuffer(GL_ARRAY_BUFFER, vbo);
                glBufferData(GL_ARRAY_BUFFER, len - 8, cast<uint8*>(cast<int>iptr + 8), GL_STATIC_DRAW);
                
                int stride = 48;
                                
                glEnableVertexAttribArray(0);
                glEnableVertexAttribArray(1);
                glEnableVertexAttribArray(2);
                glVertexAttribPointer(0, 3, GL_FLOAT, 0, stride, 0);
                glVertexAttribPointer(1, 3, GL_FLOAT, 0, stride, 12);
                glVertexAttribPointer(2, 2, GL_FLOAT, 0, stride, 24);
            }
            if (type == 14)
            {
                glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
                glBufferData(GL_ELEMENT_ARRAY_BUFFER, len - 8, cast<uint8*>(cast<int>iptr + 8), GL_STATIC_DRAW); 
                m->count = (len - 8)/4;
				LOG("Vertex count: ", m->count);
            }

            if (type == 1) pos = 99999999;
        }

        file_close(f);
    }

    m->tex = LoadTexture(fname);
    
    return m;
}

void ModelDraw(GameModel * m)
{
    glBindVertexArray(m->vao);
    glDrawElements(GL_TRIANGLES, m->count, GL_UNSIGNED_INT, cast<byte*>0);
}

float pp = 0.0;

float angle = 0.0;

float smoothstep(float v)
{
	return v;
	return 3 * v * v - 2 * v * v * v;
}

float ssrange(float v1, float vmax)
{
	float v=v1;
	float s = 1;
	if (v < 0) { s = -1; v *= -1.0; }
	
	return s * vmax * smoothstep(v / vmax);
}

struct pos
{
	float x;
    float y;
};

pos make_pos(float x, float y) { pos p; p.x =x;p.y=y; return p; }

void RenderModelX(GameModel * m, pos p1, float rotZ, float rotY)
{
	glPushMatrix();
	
	pos p = p1;
	
    glTranslatef(p.y, 0, p.x);    
    glRotatef(rotZ,1,0,0);
    glRotatef(rotY,0,1,0);
    
    float<16> matrix;
    glGetFloatv(GL_MODELVIEW_MATRIX, matrix);
    int un = glGetUniformLocation(shader->program, "mvp");
    glUniformMatrix4fv(un, 1, 0, matrix);
	
	glBindTexture(GL_TEXTURE_2D, m->tex);
	glUniform1i(glGetUniformLocation(shader->program, "tex"), 0);
	
	ModelDraw(m);
	
	glPopMatrix();
}

