GameModel * player;
GameShader * shader;

GameModel * enemy;
GameModel * grid;

void GameInit()
{
  player = ModelLoad("frigate");
  enemy = ModelLoad("enemy");
  grid = ModelLoad("grid");
  shader = ShaderLoad("render");
  ParticleInit();
  
  Enemy * ee = enemies;
   for (int i = 0; i < 8; i++)
    {
    	for (int j = 0; j < 3; j++)
    	{
    		ee[enemies_count].pos = vec3(-80 + j * 15,0,-50 + i * 15);
    		enemies_count++;
        }
    }
}

float xrot = 0.0;

float maxav = 20.0;

struct Weapon
{
	vec3t pos;
};

struct Enemy
{
	vec3t pos;
};

Enemy<64> enemies;
int enemies_count = 0;
int enemies_max = 64;

Weapon<64> weapons;
int weapons_count = 0;
int weapons_max = 64;

float shooting_time = 999.0;
float shooting_pause = 0.3;

float ll(vec3t a, vec3t b)
{
	vec3t q = sub(a,b);
	return q.x*q.x + q.y*q.y + q.z*q.z;
}

void GameUpdate(float dt)
{
	xrot += dt * 30;
	
	float v = -55;
    
    float av = 80;
    
    if (key_left) { angle += av * timeDT; angle = min(maxav, angle); }
    else if (key_right) { angle -= av * timeDT; angle = max(-1 * maxav, angle); }
    else
    {
    	if (angle>0) { angle -= av * timeDT; angle = max(0, angle); }
    	else  
        {
            angle += av * timeDT;
            angle = min(0, angle); 
        }
    }

    float vv = v * ssrange(angle/maxav,1);
    
    if (key_left) player_x -= vv * timeDT;
    if (key_right) player_x -= vv * timeDT;
	
	ParticlesUpdate(dt);
	
	Weapon * ww = weapons;
    Enemy *ee = enemies;
	
	shooting_time += dt;
	
	if (key_shoot && (shooting_time  > shooting_pause))
	{
		if (weapons_count < weapons_max)
		{
			ww[weapons_count].pos = vec3(player_y - 14.7, 0, player_x);
			weapons_count++;
        }
		shooting_time = 0;
    }
	
	for (int i = 0; i < weapons_count; i++)
	{
		int dodel = 0;
		if (ww[i].pos.x < -200)
		{
			dodel = 1;
        }
        else
        {
            ww[i].pos = add(ww[i].pos, vec3(-90 * dt,0,0));
            
            for (int j = 0; j < enemies_count; j++)
            {
            	if (ll(ee[j].pos, ww[i].pos) < 17)
            	{
            		for (int k = 0; k < 128; k++)
            		{
                        AddParticle(ee[j].pos ,  vec3(frand()*12,frand()*12,frand()*12), vec3(frand()*25,frand()*25,frand()*25), vec3(frand()*0.1,frand()*0.1 + 0.1,frand()*0.3 + 0.7), 2,  0.5 );
                    }
            		
            		ee[j] = ee[enemies_count - 1];
            		enemies_count--;
            		j=9999;
            		dodel=1;
            		score += 10;
                }
            }
            
            if (!dodel)
            {
                AddParticle(add(ww[i].pos, vec3(-1,0,0)) ,  vec3(0,0,0), vec3(0,0,0), vec3(1,0,0), 0.1, 0.3 );
                AddParticle(ww[i].pos ,  vec3(0,0,0), vec3(0,0,0), vec3(1,0,0), 0.1,  0.3 );
            }
        }
        
        if (dodel)
        {        	
			ww[i] = ww[weapons_count - 1];
			i--;
			weapons_count--;
        }
    }
}

void CameraCam()
{
	float mm = 3.5;        
    gluLookAt((40+10)*mm,40*mm,0, (-20+10)*mm,0,0, 0,1,0); 
}

void ResetCamera()
{
	glLoadIdentity(); 
	
    gluPerspective(25.0, 800.0/600.0, 0.1, 1000.0);
    
	CameraCam();
}

float player_x = 0.0;
float player_y = 20.0;

void GameRender()
{
	glGetError();
	
    glViewport(0, 0, 800, 600);   
    glClearColor(0,0,0,1);  
    glEnable(GL_DEPTH_TEST);                    
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  
    
    ResetCamera();
            
	ShaderUse(shader);
		
    RenderModelX(player, make_pos(player_x,player_y), ssrange(angle,maxav), 0);
    
    Enemy *ee = enemies;
    for (int i = 0; i < enemies_count; i++)
    {
        RenderModelX(enemy, make_pos(ee[i].pos.z, ee[i].pos.x), 0, xrot);
    }
    
    ParticlesRender();
	CheckOpenGLError();
}
