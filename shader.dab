struct GameShader
{
    byte<32> name;
    uint32 program;
};

uint32 LoadShaderProgram(byte * fn, int type)
{
    int len;
    byte * source = file_open(fn, &len);
	
	uint32 shader = glCreateShader(type);
    glShaderSource(shader, 1, &source, &len);
    glCompileShader(shader);
    file_close(source);
	
	GLint logLength;
    glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &logLength);
    if (logLength > 1)
    {
        byte * log = malloc(logLength);
        glGetShaderInfoLog(shader, logLength, &logLength, log);
        LOG("Shader compile log:\n", log);
        free(log);
    }
    
    int status;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
    if (status == 0)
	{
		glDeleteShader(shader);
		return 0;
	}
	
	return shader;
}

GameShader * ShaderLoad(cstring fname)
{
	LOG("Loading shader ", fname);
	
    GameShader * m = malloc(36);
	
    byte<64> filename_ps;
    byte<64> filename_vs;
	
	reset(filename_ps, 64);
	append(filename_ps, "data\\");
	append(filename_ps, fname);
	append(filename_ps, "_ps.txt");
	
	reset(filename_vs, 64);
	append(filename_vs, "data\\");
	append(filename_vs, fname);
	append(filename_vs, "_vs.txt");
		
    m->program = glCreateProgram();
	uint32 ps = LoadShaderProgram(filename_ps, GL_FRAGMENT_SHADER);
	uint32 vs = LoadShaderProgram(filename_vs, GL_VERTEX_SHADER);
	
	glAttachShader(m->program, ps);
	glAttachShader(m->program, vs);
		
	glLinkProgram(m->program);
	
	GLint logLength;
    glGetProgramiv(m->program, GL_INFO_LOG_LENGTH, &logLength);
    if (logLength > 1)
    {
        GLchar *log = malloc(logLength);
        glGetProgramInfoLog(m->program, logLength, &logLength, log);
        LOG("Program link log:\n", log);
        free(log);
    }
    
    GLuint status;
    glGetProgramiv(m->program, GL_LINK_STATUS, &status);
    if (status == 0)
		return 0;
	
	return m;
}

void ShaderUse(GameShader * s)
{
	glUseProgram(s->program);
}
