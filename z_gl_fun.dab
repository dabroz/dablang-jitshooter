typedef uint32 GLuint;
typedef uint32 GLint;
typedef uint32 GLenum;
typedef uint32 GLboolean;
typedef uint32 GLsizei;
typedef byte GLchar;
typedef double GLdouble;
typedef uint32 GLboolean;
typedef float GLfloat;
typedef uint32 GLintptr;
typedef uint32 GLsizeiptr;

extern ("win", "kernel32", "name", "LoadLibraryA") byte * LoadLibrary(cstring name);
extern ("win", "kernel32") byte * GetProcAddress(byte * lib, cstring name);
extern ("win", "opengl32") byte * wglGetProcAddress(cstring name);

extern ("dablang", "1") void dablang_preload_opengl();

byte * xsubloadgl(cstring name)
{
	byte * base = LoadLibrary("opengl32.dll");
	byte * funbase = GetProcAddress(base, name);	
	if (funbase) return funbase;
	
	base = LoadLibrary("glu32.dll");
	funbase = GetProcAddress(base, name);
	if (funbase) return funbase;
	
	return wglGetProcAddress(name);
}

byte * loader_opengl(cstring name)
{
	byte * ret = xsubloadgl(name);
	return ret;
}

cstring loader_opengl_cc = "stdcall";
int loader_opengl_priority = 100;
bool loader_opengl_auto = false;


[opengl] cstring glGetString(int state);
[opengl] int glGetError();
[opengl] void glPushMatrix();
[opengl] void glPopMatrix();
[opengl] void glBlendFunc(GLenum  sfactor,  GLenum  dfactor);
[opengl] void glEnable(int state);
[opengl] void glDisable(int state);
[opengl] void glClear(int state);
[opengl] void glDepthMask(GLboolean  flag);
[opengl] void glClearColor(float r, float g, float b, float a);
[opengl] void glLoadIdentity();
[opengl] void glColor3f(float r, float g, float b);
[opengl] void glLineWidth(float w);
[opengl] void glFlush();
[opengl] void glRecti(int x1, int y1, int x2, int y2);
[opengl] void glRectf(float x1, float y1, float x2, float y2);
[opengl] void glViewport(int x, int y, int w, int h);
[opengl] void glMatrixMode(int state);
[opengl] void glOrtho(double left, double right, double bottom, double top, double nearVal, double farVal);
[opengl] void glDrawElements(GLenum  mode,  GLsizei  count,  GLenum  type, byte * indices);
[opengl] void glGetFloatv(GLenum pname, float * params);
[opengl] void glGenTextures(GLsizei n, GLuint * textures);
[opengl] void glBindTexture(GLenum target, GLuint texture);
[opengl] void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, byte * data);
[opengl] void glTexParameteri(GLenum target, GLenum  pname, GLint param);
[opengl] void glTranslatef(GLfloat x, GLfloat y, GLfloat z);
[opengl] void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
[opengl] void glDrawArrays(GLenum  mode,  GLint  first,  GLsizei  count);

[opengl] void gluLookAt (GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ);
[opengl] void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar);

[opengl] void glGenBuffers(int n,  uint32 *  buffers);
[opengl] void glBindBuffer(int target, uint32  buffer);
[opengl] void glBufferData(int target, uint32 size, const byte * data, int usage);
[opengl] void glBindVertexArray (uint32 vao);
[opengl] void glGenVertexArrays (uint32 count, uint32 * ptrs);
[opengl] void glDisableVertexAttribArray (GLuint attr);
[opengl] void glEnableVertexAttribArray (GLuint attr);
[opengl] void glVertexAttribPointer (GLuint attr, GLint size, GLenum type, GLboolean norm, GLsizei stride, uint32 offset);
[opengl] GLuint glCreateShader(GLenum  shaderType);
[opengl] void glShaderSource(GLuint  shader,  GLsizei  count,  byte ** string,  GLint * length);
[opengl] void glCompileShader(GLuint  shader);
[opengl] void glGetShaderiv(GLuint  shader,  GLenum  pname,  GLint * params);
[opengl] void glGetProgramiv(GLuint  program,  GLenum  pname,  GLint * params);
[opengl] void glGetShaderInfoLog(GLuint  shader,  GLsizei  maxLength,  GLsizei * length,  GLchar * infoLog);
[opengl] void glGetProgramInfoLog(GLuint  program,  GLsizei  maxLength,  GLsizei * length,  GLchar * infoLog);
[opengl] void glDeleteShader(GLuint  shader);
[opengl] GLuint glCreateProgram();
[opengl] void glAttachShader(GLuint  program,  GLuint  shader);
[opengl] void glLinkProgram(GLuint program);
[opengl] void glUseProgram(GLuint  program);
[opengl] GLint glGetUniformLocation(GLuint  program, cstring name);
[opengl] void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, float * value);
[opengl] void glUniform1i(GLint location, int v);
[opengl] void glBufferSubData(GLenum  target,  GLintptr  offset,  GLsizeiptr  size,  byte *  data);

[opengl] void glBindAttribLocation(GLuint program, GLuint index, cstring name);
