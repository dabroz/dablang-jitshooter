[stb] byte * image_load(byte * image_data, int len, int * result_width, int * result_height);
[stb] void image_free(byte * data);

byte * loader_stb(cstring name)
{
	byte * base = LoadLibrary("stb_loader.dll");
	return GetProcAddress(base, name);	
}

int LoadTexture(cstring filename)
{
	LOG("Loading texture ", filename);
	byte<128> fn;
	reset(fn, 128);
	append(fn, "data\\");
	append(fn, filename);
	append(fn, "D.jpg");
	return LoadTextureF(fn);
}

int LoadTextureF(byte* fn)	
{
    int len;
    byte * f = file_open(fn, &len);
    
    if (!f) 
    {
    	LOG("FILE NOT FOUND: ", fn);
        return 0;
    }
    
    int width;
    int height;
    byte * tex = image_load(f, len, &width, &height);
    
	byte<512> log;
	reset(log, 512);
	append(log, "Texture `");
	append(log, fn);
	append(log, "` -> ");
	append(log, width);
	append(log, "x");
	append(log, height);
	LOG(log);
    
	uint32 ret;
	glGenTextures(1, &ret);
	glBindTexture(GL_TEXTURE_2D, ret);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, 1);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY, 8);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, tex);
	
	image_free(tex);
	file_close(f);
    
    return ret;
}
